// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package company

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Int int32

func IntPtr(v Int) *Int { return &v }

// Attributes:
//  - ID
//  - Name
//  - Address
//  - CompanyID
//  - Date
type Employee struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
  CompanyID string `thrift:"companyID,4" db:"companyID" json:"companyID"`
  Date *Date `thrift:"date,5" db:"date" json:"date"`
}

func NewEmployee() *Employee {
  return &Employee{}
}


func (p *Employee) GetID() string {
  return p.ID
}

func (p *Employee) GetName() string {
  return p.Name
}

func (p *Employee) GetAddress() string {
  return p.Address
}

func (p *Employee) GetCompanyID() string {
  return p.CompanyID
}
var Employee_Date_DEFAULT *Date
func (p *Employee) GetDate() *Date {
  if !p.IsSetDate() {
    return Employee_Date_DEFAULT
  }
return p.Date
}
func (p *Employee) IsSetDate() bool {
  return p.Date != nil
}

func (p *Employee) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Employee)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Employee)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Employee)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Employee)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CompanyID = v
}
  return nil
}

func (p *Employee)  ReadField5(iprot thrift.TProtocol) error {
  p.Date = &Date{}
  if err := p.Date.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Date), err)
  }
  return nil
}

func (p *Employee) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Employee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Employee) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Employee) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Employee) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *Employee) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("companyID", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:companyID: ", p), err) }
  if err := oprot.WriteString(string(p.CompanyID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.companyID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:companyID: ", p), err) }
  return err
}

func (p *Employee) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("date", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:date: ", p), err) }
  if err := p.Date.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Date), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:date: ", p), err) }
  return err
}

func (p *Employee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Employee(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Address
type Company struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
}

func NewCompany() *Company {
  return &Company{}
}


func (p *Company) GetID() string {
  return p.ID
}

func (p *Company) GetName() string {
  return p.Name
}

func (p *Company) GetAddress() string {
  return p.Address
}
func (p *Company) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Company)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Company)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Company)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Company) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Company"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Company) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Company) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Company) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *Company) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Company(%+v)", *p)
}

// Attributes:
//  - Day
//  - Month
//  - Year
type Date struct {
  Day Int `thrift:"day,1" db:"day" json:"day"`
  Month Int `thrift:"month,2" db:"month" json:"month"`
  Year Int `thrift:"year,3" db:"year" json:"year"`
}

func NewDate() *Date {
  return &Date{}
}


func (p *Date) GetDay() Int {
  return p.Day
}

func (p *Date) GetMonth() Int {
  return p.Month
}

func (p *Date) GetYear() Int {
  return p.Year
}
func (p *Date) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Date)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.Day = temp
}
  return nil
}

func (p *Date)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Month = temp
}
  return nil
}

func (p *Date)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.Year = temp
}
  return nil
}

func (p *Date) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Date"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Date) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:day: ", p), err) }
  if err := oprot.WriteI32(int32(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:day: ", p), err) }
  return err
}

func (p *Date) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("month", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:month: ", p), err) }
  if err := oprot.WriteI32(int32(p.Month)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.month (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:month: ", p), err) }
  return err
}

func (p *Date) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:year: ", p), err) }
  if err := oprot.WriteI32(int32(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:year: ", p), err) }
  return err
}

func (p *Date) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Date(%+v)", *p)
}

type CompanyManager interface {
  // Parameters:
  //  - ID
  //  - CompanyID
  GetEmployee(ctx context.Context, id string, companyID string) (r *Employee, err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Address
  //  - Date
  //  - Company
  PostEmployee(ctx context.Context, id string, name string, address string, date *Date, company string) (err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Address
  //  - Date
  //  - Company
  PutEmployee(ctx context.Context, id string, name string, address string, date *Date, company string) (err error)
  // Parameters:
  //  - ID
  //  - CompanyID
  RemoveEmployee(ctx context.Context, id string, companyID string) (err error)
  // Parameters:
  //  - ID
  GetCompany(ctx context.Context, id string) (r *Company, err error)
  GetAllEmployee(ctx context.Context) (r []*Employee, err error)
  // Parameters:
  //  - CompanyID
  //  - First
  //  - Last
  GetListEmployeeInDate(ctx context.Context, companyID string, first *Date, last *Date) (r []*Employee, err error)
  GetAllCompany(ctx context.Context) (r []*Company, err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Address
  PostCompany(ctx context.Context, id string, name string, address string) (err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Address
  PutCompany(ctx context.Context, id string, name string, address string) (err error)
  // Parameters:
  //  - ID
  GetEmployeeList(ctx context.Context, id string) (r []*Employee, err error)
  // Parameters:
  //  - ID
  RemoveCompany(ctx context.Context, id string) (err error)
}

type CompanyManagerClient struct {
  c thrift.TClient
}

func NewCompanyManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CompanyManagerClient {
  return &CompanyManagerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCompanyManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CompanyManagerClient {
  return &CompanyManagerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCompanyManagerClient(c thrift.TClient) *CompanyManagerClient {
  return &CompanyManagerClient{
    c: c,
  }
}

func (p *CompanyManagerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ID
//  - CompanyID
func (p *CompanyManagerClient) GetEmployee(ctx context.Context, id string, companyID string) (r *Employee, err error) {
  var _args0 CompanyManagerGetEmployeeArgs
  _args0.ID = id
  _args0.CompanyID = companyID
  var _result1 CompanyManagerGetEmployeeResult
  if err = p.Client_().Call(ctx, "getEmployee", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Name
//  - Address
//  - Date
//  - Company
func (p *CompanyManagerClient) PostEmployee(ctx context.Context, id string, name string, address string, date *Date, company string) (err error) {
  var _args2 CompanyManagerPostEmployeeArgs
  _args2.ID = id
  _args2.Name = name
  _args2.Address = address
  _args2.Date = date
  _args2.Company = company
  var _result3 CompanyManagerPostEmployeeResult
  if err = p.Client_().Call(ctx, "postEmployee", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
//  - Name
//  - Address
//  - Date
//  - Company
func (p *CompanyManagerClient) PutEmployee(ctx context.Context, id string, name string, address string, date *Date, company string) (err error) {
  var _args4 CompanyManagerPutEmployeeArgs
  _args4.ID = id
  _args4.Name = name
  _args4.Address = address
  _args4.Date = date
  _args4.Company = company
  var _result5 CompanyManagerPutEmployeeResult
  if err = p.Client_().Call(ctx, "putEmployee", &_args4, &_result5); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
//  - CompanyID
func (p *CompanyManagerClient) RemoveEmployee(ctx context.Context, id string, companyID string) (err error) {
  var _args6 CompanyManagerRemoveEmployeeArgs
  _args6.ID = id
  _args6.CompanyID = companyID
  var _result7 CompanyManagerRemoveEmployeeResult
  if err = p.Client_().Call(ctx, "removeEmployee", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
func (p *CompanyManagerClient) GetCompany(ctx context.Context, id string) (r *Company, err error) {
  var _args8 CompanyManagerGetCompanyArgs
  _args8.ID = id
  var _result9 CompanyManagerGetCompanyResult
  if err = p.Client_().Call(ctx, "getCompany", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

func (p *CompanyManagerClient) GetAllEmployee(ctx context.Context) (r []*Employee, err error) {
  var _args10 CompanyManagerGetAllEmployeeArgs
  var _result11 CompanyManagerGetAllEmployeeResult
  if err = p.Client_().Call(ctx, "getAllEmployee", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - CompanyID
//  - First
//  - Last
func (p *CompanyManagerClient) GetListEmployeeInDate(ctx context.Context, companyID string, first *Date, last *Date) (r []*Employee, err error) {
  var _args12 CompanyManagerGetListEmployeeInDateArgs
  _args12.CompanyID = companyID
  _args12.First = first
  _args12.Last = last
  var _result13 CompanyManagerGetListEmployeeInDateResult
  if err = p.Client_().Call(ctx, "getListEmployeeInDate", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

func (p *CompanyManagerClient) GetAllCompany(ctx context.Context) (r []*Company, err error) {
  var _args14 CompanyManagerGetAllCompanyArgs
  var _result15 CompanyManagerGetAllCompanyResult
  if err = p.Client_().Call(ctx, "getAllCompany", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Name
//  - Address
func (p *CompanyManagerClient) PostCompany(ctx context.Context, id string, name string, address string) (err error) {
  var _args16 CompanyManagerPostCompanyArgs
  _args16.ID = id
  _args16.Name = name
  _args16.Address = address
  var _result17 CompanyManagerPostCompanyResult
  if err = p.Client_().Call(ctx, "postCompany", &_args16, &_result17); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
//  - Name
//  - Address
func (p *CompanyManagerClient) PutCompany(ctx context.Context, id string, name string, address string) (err error) {
  var _args18 CompanyManagerPutCompanyArgs
  _args18.ID = id
  _args18.Name = name
  _args18.Address = address
  var _result19 CompanyManagerPutCompanyResult
  if err = p.Client_().Call(ctx, "putCompany", &_args18, &_result19); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
func (p *CompanyManagerClient) GetEmployeeList(ctx context.Context, id string) (r []*Employee, err error) {
  var _args20 CompanyManagerGetEmployeeListArgs
  _args20.ID = id
  var _result21 CompanyManagerGetEmployeeListResult
  if err = p.Client_().Call(ctx, "getEmployeeList", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *CompanyManagerClient) RemoveCompany(ctx context.Context, id string) (err error) {
  var _args22 CompanyManagerRemoveCompanyArgs
  _args22.ID = id
  var _result23 CompanyManagerRemoveCompanyResult
  if err = p.Client_().Call(ctx, "removeCompany", &_args22, &_result23); err != nil {
    return
  }
  return nil
}

type CompanyManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CompanyManager
}

func (p *CompanyManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CompanyManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CompanyManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCompanyManagerProcessor(handler CompanyManager) *CompanyManagerProcessor {

  self24 := &CompanyManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["getEmployee"] = &companyManagerProcessorGetEmployee{handler:handler}
  self24.processorMap["postEmployee"] = &companyManagerProcessorPostEmployee{handler:handler}
  self24.processorMap["putEmployee"] = &companyManagerProcessorPutEmployee{handler:handler}
  self24.processorMap["removeEmployee"] = &companyManagerProcessorRemoveEmployee{handler:handler}
  self24.processorMap["getCompany"] = &companyManagerProcessorGetCompany{handler:handler}
  self24.processorMap["getAllEmployee"] = &companyManagerProcessorGetAllEmployee{handler:handler}
  self24.processorMap["getListEmployeeInDate"] = &companyManagerProcessorGetListEmployeeInDate{handler:handler}
  self24.processorMap["getAllCompany"] = &companyManagerProcessorGetAllCompany{handler:handler}
  self24.processorMap["postCompany"] = &companyManagerProcessorPostCompany{handler:handler}
  self24.processorMap["putCompany"] = &companyManagerProcessorPutCompany{handler:handler}
  self24.processorMap["getEmployeeList"] = &companyManagerProcessorGetEmployeeList{handler:handler}
  self24.processorMap["removeCompany"] = &companyManagerProcessorRemoveCompany{handler:handler}
return self24
}

func (p *CompanyManagerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x25

}

type companyManagerProcessorGetEmployee struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetEmployeeResult{}
var retval *Employee
  var err2 error
  if retval, err2 = p.handler.GetEmployee(ctx, args.ID, args.CompanyID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEmployee: " + err2.Error())
    oprot.WriteMessageBegin("getEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorPostEmployee struct {
  handler CompanyManager
}

func (p *companyManagerProcessorPostEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerPostEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("postEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerPostEmployeeResult{}
  var err2 error
  if err2 = p.handler.PostEmployee(ctx, args.ID, args.Name, args.Address, args.Date, args.Company); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing postEmployee: " + err2.Error())
    oprot.WriteMessageBegin("postEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("postEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorPutEmployee struct {
  handler CompanyManager
}

func (p *companyManagerProcessorPutEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerPutEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerPutEmployeeResult{}
  var err2 error
  if err2 = p.handler.PutEmployee(ctx, args.ID, args.Name, args.Address, args.Date, args.Company); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putEmployee: " + err2.Error())
    oprot.WriteMessageBegin("putEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorRemoveEmployee struct {
  handler CompanyManager
}

func (p *companyManagerProcessorRemoveEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerRemoveEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerRemoveEmployeeResult{}
  var err2 error
  if err2 = p.handler.RemoveEmployee(ctx, args.ID, args.CompanyID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeEmployee: " + err2.Error())
    oprot.WriteMessageBegin("removeEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorGetCompany struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetCompany) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetCompanyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetCompanyResult{}
var retval *Company
  var err2 error
  if retval, err2 = p.handler.GetCompany(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompany: " + err2.Error())
    oprot.WriteMessageBegin("getCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCompany", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorGetAllEmployee struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetAllEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetAllEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetAllEmployeeResult{}
var retval []*Employee
  var err2 error
  if retval, err2 = p.handler.GetAllEmployee(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllEmployee: " + err2.Error())
    oprot.WriteMessageBegin("getAllEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorGetListEmployeeInDate struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetListEmployeeInDate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetListEmployeeInDateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListEmployeeInDate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetListEmployeeInDateResult{}
var retval []*Employee
  var err2 error
  if retval, err2 = p.handler.GetListEmployeeInDate(ctx, args.CompanyID, args.First, args.Last); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListEmployeeInDate: " + err2.Error())
    oprot.WriteMessageBegin("getListEmployeeInDate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListEmployeeInDate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorGetAllCompany struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetAllCompany) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetAllCompanyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetAllCompanyResult{}
var retval []*Company
  var err2 error
  if retval, err2 = p.handler.GetAllCompany(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllCompany: " + err2.Error())
    oprot.WriteMessageBegin("getAllCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllCompany", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorPostCompany struct {
  handler CompanyManager
}

func (p *companyManagerProcessorPostCompany) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerPostCompanyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("postCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerPostCompanyResult{}
  var err2 error
  if err2 = p.handler.PostCompany(ctx, args.ID, args.Name, args.Address); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing postCompany: " + err2.Error())
    oprot.WriteMessageBegin("postCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("postCompany", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorPutCompany struct {
  handler CompanyManager
}

func (p *companyManagerProcessorPutCompany) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerPutCompanyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerPutCompanyResult{}
  var err2 error
  if err2 = p.handler.PutCompany(ctx, args.ID, args.Name, args.Address); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putCompany: " + err2.Error())
    oprot.WriteMessageBegin("putCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putCompany", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorGetEmployeeList struct {
  handler CompanyManager
}

func (p *companyManagerProcessorGetEmployeeList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerGetEmployeeListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getEmployeeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerGetEmployeeListResult{}
var retval []*Employee
  var err2 error
  if retval, err2 = p.handler.GetEmployeeList(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEmployeeList: " + err2.Error())
    oprot.WriteMessageBegin("getEmployeeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getEmployeeList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type companyManagerProcessorRemoveCompany struct {
  handler CompanyManager
}

func (p *companyManagerProcessorRemoveCompany) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CompanyManagerRemoveCompanyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CompanyManagerRemoveCompanyResult{}
  var err2 error
  if err2 = p.handler.RemoveCompany(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeCompany: " + err2.Error())
    oprot.WriteMessageBegin("removeCompany", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeCompany", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
//  - CompanyID
type CompanyManagerGetEmployeeArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CompanyID string `thrift:"companyID,2" db:"companyID" json:"companyID"`
}

func NewCompanyManagerGetEmployeeArgs() *CompanyManagerGetEmployeeArgs {
  return &CompanyManagerGetEmployeeArgs{}
}


func (p *CompanyManagerGetEmployeeArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerGetEmployeeArgs) GetCompanyID() string {
  return p.CompanyID
}
func (p *CompanyManagerGetEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerGetEmployeeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CompanyID = v
}
  return nil
}

func (p *CompanyManagerGetEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerGetEmployeeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("companyID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:companyID: ", p), err) }
  if err := oprot.WriteString(string(p.CompanyID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.companyID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:companyID: ", p), err) }
  return err
}

func (p *CompanyManagerGetEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetEmployeeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetEmployeeResult struct {
  Success *Employee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetEmployeeResult() *CompanyManagerGetEmployeeResult {
  return &CompanyManagerGetEmployeeResult{}
}

var CompanyManagerGetEmployeeResult_Success_DEFAULT *Employee
func (p *CompanyManagerGetEmployeeResult) GetSuccess() *Employee {
  if !p.IsSetSuccess() {
    return CompanyManagerGetEmployeeResult_Success_DEFAULT
  }
return p.Success
}
func (p *CompanyManagerGetEmployeeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Employee{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetEmployeeResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Address
//  - Date
//  - Company
type CompanyManagerPostEmployeeArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
  Date *Date `thrift:"date,4" db:"date" json:"date"`
  Company string `thrift:"company,5" db:"company" json:"company"`
}

func NewCompanyManagerPostEmployeeArgs() *CompanyManagerPostEmployeeArgs {
  return &CompanyManagerPostEmployeeArgs{}
}


func (p *CompanyManagerPostEmployeeArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerPostEmployeeArgs) GetName() string {
  return p.Name
}

func (p *CompanyManagerPostEmployeeArgs) GetAddress() string {
  return p.Address
}
var CompanyManagerPostEmployeeArgs_Date_DEFAULT *Date
func (p *CompanyManagerPostEmployeeArgs) GetDate() *Date {
  if !p.IsSetDate() {
    return CompanyManagerPostEmployeeArgs_Date_DEFAULT
  }
return p.Date
}

func (p *CompanyManagerPostEmployeeArgs) GetCompany() string {
  return p.Company
}
func (p *CompanyManagerPostEmployeeArgs) IsSetDate() bool {
  return p.Date != nil
}

func (p *CompanyManagerPostEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPostEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerPostEmployeeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CompanyManagerPostEmployeeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *CompanyManagerPostEmployeeArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Date = &Date{}
  if err := p.Date.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Date), err)
  }
  return nil
}

func (p *CompanyManagerPostEmployeeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Company = v
}
  return nil
}

func (p *CompanyManagerPostEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("postEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPostEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerPostEmployeeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CompanyManagerPostEmployeeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *CompanyManagerPostEmployeeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("date", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:date: ", p), err) }
  if err := p.Date.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Date), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:date: ", p), err) }
  return err
}

func (p *CompanyManagerPostEmployeeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("company", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:company: ", p), err) }
  if err := oprot.WriteString(string(p.Company)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.company (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:company: ", p), err) }
  return err
}

func (p *CompanyManagerPostEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPostEmployeeArgs(%+v)", *p)
}

type CompanyManagerPostEmployeeResult struct {
}

func NewCompanyManagerPostEmployeeResult() *CompanyManagerPostEmployeeResult {
  return &CompanyManagerPostEmployeeResult{}
}

func (p *CompanyManagerPostEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPostEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("postEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPostEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPostEmployeeResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Address
//  - Date
//  - Company
type CompanyManagerPutEmployeeArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
  Date *Date `thrift:"date,4" db:"date" json:"date"`
  Company string `thrift:"company,5" db:"company" json:"company"`
}

func NewCompanyManagerPutEmployeeArgs() *CompanyManagerPutEmployeeArgs {
  return &CompanyManagerPutEmployeeArgs{}
}


func (p *CompanyManagerPutEmployeeArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerPutEmployeeArgs) GetName() string {
  return p.Name
}

func (p *CompanyManagerPutEmployeeArgs) GetAddress() string {
  return p.Address
}
var CompanyManagerPutEmployeeArgs_Date_DEFAULT *Date
func (p *CompanyManagerPutEmployeeArgs) GetDate() *Date {
  if !p.IsSetDate() {
    return CompanyManagerPutEmployeeArgs_Date_DEFAULT
  }
return p.Date
}

func (p *CompanyManagerPutEmployeeArgs) GetCompany() string {
  return p.Company
}
func (p *CompanyManagerPutEmployeeArgs) IsSetDate() bool {
  return p.Date != nil
}

func (p *CompanyManagerPutEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPutEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerPutEmployeeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CompanyManagerPutEmployeeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *CompanyManagerPutEmployeeArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Date = &Date{}
  if err := p.Date.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Date), err)
  }
  return nil
}

func (p *CompanyManagerPutEmployeeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Company = v
}
  return nil
}

func (p *CompanyManagerPutEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPutEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerPutEmployeeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CompanyManagerPutEmployeeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *CompanyManagerPutEmployeeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("date", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:date: ", p), err) }
  if err := p.Date.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Date), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:date: ", p), err) }
  return err
}

func (p *CompanyManagerPutEmployeeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("company", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:company: ", p), err) }
  if err := oprot.WriteString(string(p.Company)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.company (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:company: ", p), err) }
  return err
}

func (p *CompanyManagerPutEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPutEmployeeArgs(%+v)", *p)
}

type CompanyManagerPutEmployeeResult struct {
}

func NewCompanyManagerPutEmployeeResult() *CompanyManagerPutEmployeeResult {
  return &CompanyManagerPutEmployeeResult{}
}

func (p *CompanyManagerPutEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPutEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPutEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPutEmployeeResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - CompanyID
type CompanyManagerRemoveEmployeeArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CompanyID string `thrift:"companyID,2" db:"companyID" json:"companyID"`
}

func NewCompanyManagerRemoveEmployeeArgs() *CompanyManagerRemoveEmployeeArgs {
  return &CompanyManagerRemoveEmployeeArgs{}
}


func (p *CompanyManagerRemoveEmployeeArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerRemoveEmployeeArgs) GetCompanyID() string {
  return p.CompanyID
}
func (p *CompanyManagerRemoveEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerRemoveEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerRemoveEmployeeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CompanyID = v
}
  return nil
}

func (p *CompanyManagerRemoveEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerRemoveEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerRemoveEmployeeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("companyID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:companyID: ", p), err) }
  if err := oprot.WriteString(string(p.CompanyID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.companyID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:companyID: ", p), err) }
  return err
}

func (p *CompanyManagerRemoveEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerRemoveEmployeeArgs(%+v)", *p)
}

type CompanyManagerRemoveEmployeeResult struct {
}

func NewCompanyManagerRemoveEmployeeResult() *CompanyManagerRemoveEmployeeResult {
  return &CompanyManagerRemoveEmployeeResult{}
}

func (p *CompanyManagerRemoveEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerRemoveEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerRemoveEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerRemoveEmployeeResult(%+v)", *p)
}

// Attributes:
//  - ID
type CompanyManagerGetCompanyArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewCompanyManagerGetCompanyArgs() *CompanyManagerGetCompanyArgs {
  return &CompanyManagerGetCompanyArgs{}
}


func (p *CompanyManagerGetCompanyArgs) GetID() string {
  return p.ID
}
func (p *CompanyManagerGetCompanyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetCompanyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerGetCompanyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCompany_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerGetCompanyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetCompanyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetCompanyResult struct {
  Success *Company `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetCompanyResult() *CompanyManagerGetCompanyResult {
  return &CompanyManagerGetCompanyResult{}
}

var CompanyManagerGetCompanyResult_Success_DEFAULT *Company
func (p *CompanyManagerGetCompanyResult) GetSuccess() *Company {
  if !p.IsSetSuccess() {
    return CompanyManagerGetCompanyResult_Success_DEFAULT
  }
return p.Success
}
func (p *CompanyManagerGetCompanyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetCompanyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetCompanyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Company{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CompanyManagerGetCompanyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCompany_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetCompanyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetCompanyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetCompanyResult(%+v)", *p)
}

type CompanyManagerGetAllEmployeeArgs struct {
}

func NewCompanyManagerGetAllEmployeeArgs() *CompanyManagerGetAllEmployeeArgs {
  return &CompanyManagerGetAllEmployeeArgs{}
}

func (p *CompanyManagerGetAllEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetAllEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetAllEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetAllEmployeeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetAllEmployeeResult struct {
  Success []*Employee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetAllEmployeeResult() *CompanyManagerGetAllEmployeeResult {
  return &CompanyManagerGetAllEmployeeResult{}
}

var CompanyManagerGetAllEmployeeResult_Success_DEFAULT []*Employee

func (p *CompanyManagerGetAllEmployeeResult) GetSuccess() []*Employee {
  return p.Success
}
func (p *CompanyManagerGetAllEmployeeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetAllEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetAllEmployeeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Employee, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &Employee{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Success = append(p.Success, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompanyManagerGetAllEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetAllEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetAllEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetAllEmployeeResult(%+v)", *p)
}

// Attributes:
//  - CompanyID
//  - First
//  - Last
type CompanyManagerGetListEmployeeInDateArgs struct {
  CompanyID string `thrift:"companyID,1" db:"companyID" json:"companyID"`
  First *Date `thrift:"first,2" db:"first" json:"first"`
  Last *Date `thrift:"last,3" db:"last" json:"last"`
}

func NewCompanyManagerGetListEmployeeInDateArgs() *CompanyManagerGetListEmployeeInDateArgs {
  return &CompanyManagerGetListEmployeeInDateArgs{}
}


func (p *CompanyManagerGetListEmployeeInDateArgs) GetCompanyID() string {
  return p.CompanyID
}
var CompanyManagerGetListEmployeeInDateArgs_First_DEFAULT *Date
func (p *CompanyManagerGetListEmployeeInDateArgs) GetFirst() *Date {
  if !p.IsSetFirst() {
    return CompanyManagerGetListEmployeeInDateArgs_First_DEFAULT
  }
return p.First
}
var CompanyManagerGetListEmployeeInDateArgs_Last_DEFAULT *Date
func (p *CompanyManagerGetListEmployeeInDateArgs) GetLast() *Date {
  if !p.IsSetLast() {
    return CompanyManagerGetListEmployeeInDateArgs_Last_DEFAULT
  }
return p.Last
}
func (p *CompanyManagerGetListEmployeeInDateArgs) IsSetFirst() bool {
  return p.First != nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs) IsSetLast() bool {
  return p.Last != nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CompanyID = v
}
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.First = &Date{}
  if err := p.First.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.First), err)
  }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Last = &Date{}
  if err := p.Last.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Last), err)
  }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListEmployeeInDate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("companyID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:companyID: ", p), err) }
  if err := oprot.WriteString(string(p.CompanyID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.companyID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:companyID: ", p), err) }
  return err
}

func (p *CompanyManagerGetListEmployeeInDateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first: ", p), err) }
  if err := p.First.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.First), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first: ", p), err) }
  return err
}

func (p *CompanyManagerGetListEmployeeInDateArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last: ", p), err) }
  if err := p.Last.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Last), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last: ", p), err) }
  return err
}

func (p *CompanyManagerGetListEmployeeInDateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetListEmployeeInDateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetListEmployeeInDateResult struct {
  Success []*Employee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetListEmployeeInDateResult() *CompanyManagerGetListEmployeeInDateResult {
  return &CompanyManagerGetListEmployeeInDateResult{}
}

var CompanyManagerGetListEmployeeInDateResult_Success_DEFAULT []*Employee

func (p *CompanyManagerGetListEmployeeInDateResult) GetSuccess() []*Employee {
  return p.Success
}
func (p *CompanyManagerGetListEmployeeInDateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetListEmployeeInDateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Employee, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &Employee{}
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Success = append(p.Success, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListEmployeeInDate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetListEmployeeInDateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetListEmployeeInDateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetListEmployeeInDateResult(%+v)", *p)
}

type CompanyManagerGetAllCompanyArgs struct {
}

func NewCompanyManagerGetAllCompanyArgs() *CompanyManagerGetAllCompanyArgs {
  return &CompanyManagerGetAllCompanyArgs{}
}

func (p *CompanyManagerGetAllCompanyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetAllCompanyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCompany_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetAllCompanyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetAllCompanyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetAllCompanyResult struct {
  Success []*Company `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetAllCompanyResult() *CompanyManagerGetAllCompanyResult {
  return &CompanyManagerGetAllCompanyResult{}
}

var CompanyManagerGetAllCompanyResult_Success_DEFAULT []*Company

func (p *CompanyManagerGetAllCompanyResult) GetSuccess() []*Company {
  return p.Success
}
func (p *CompanyManagerGetAllCompanyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetAllCompanyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetAllCompanyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Company, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &Company{}
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.Success = append(p.Success, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompanyManagerGetAllCompanyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCompany_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetAllCompanyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetAllCompanyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetAllCompanyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Address
type CompanyManagerPostCompanyArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
}

func NewCompanyManagerPostCompanyArgs() *CompanyManagerPostCompanyArgs {
  return &CompanyManagerPostCompanyArgs{}
}


func (p *CompanyManagerPostCompanyArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerPostCompanyArgs) GetName() string {
  return p.Name
}

func (p *CompanyManagerPostCompanyArgs) GetAddress() string {
  return p.Address
}
func (p *CompanyManagerPostCompanyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPostCompanyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerPostCompanyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CompanyManagerPostCompanyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *CompanyManagerPostCompanyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("postCompany_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPostCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerPostCompanyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CompanyManagerPostCompanyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *CompanyManagerPostCompanyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPostCompanyArgs(%+v)", *p)
}

type CompanyManagerPostCompanyResult struct {
}

func NewCompanyManagerPostCompanyResult() *CompanyManagerPostCompanyResult {
  return &CompanyManagerPostCompanyResult{}
}

func (p *CompanyManagerPostCompanyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPostCompanyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("postCompany_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPostCompanyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPostCompanyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Address
type CompanyManagerPutCompanyArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
}

func NewCompanyManagerPutCompanyArgs() *CompanyManagerPutCompanyArgs {
  return &CompanyManagerPutCompanyArgs{}
}


func (p *CompanyManagerPutCompanyArgs) GetID() string {
  return p.ID
}

func (p *CompanyManagerPutCompanyArgs) GetName() string {
  return p.Name
}

func (p *CompanyManagerPutCompanyArgs) GetAddress() string {
  return p.Address
}
func (p *CompanyManagerPutCompanyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPutCompanyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerPutCompanyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CompanyManagerPutCompanyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *CompanyManagerPutCompanyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putCompany_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPutCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerPutCompanyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CompanyManagerPutCompanyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *CompanyManagerPutCompanyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPutCompanyArgs(%+v)", *p)
}

type CompanyManagerPutCompanyResult struct {
}

func NewCompanyManagerPutCompanyResult() *CompanyManagerPutCompanyResult {
  return &CompanyManagerPutCompanyResult{}
}

func (p *CompanyManagerPutCompanyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerPutCompanyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putCompany_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerPutCompanyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerPutCompanyResult(%+v)", *p)
}

// Attributes:
//  - ID
type CompanyManagerGetEmployeeListArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewCompanyManagerGetEmployeeListArgs() *CompanyManagerGetEmployeeListArgs {
  return &CompanyManagerGetEmployeeListArgs{}
}


func (p *CompanyManagerGetEmployeeListArgs) GetID() string {
  return p.ID
}
func (p *CompanyManagerGetEmployeeListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerGetEmployeeListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEmployeeList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetEmployeeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerGetEmployeeListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetEmployeeListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CompanyManagerGetEmployeeListResult struct {
  Success []*Employee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCompanyManagerGetEmployeeListResult() *CompanyManagerGetEmployeeListResult {
  return &CompanyManagerGetEmployeeListResult{}
}

var CompanyManagerGetEmployeeListResult_Success_DEFAULT []*Employee

func (p *CompanyManagerGetEmployeeListResult) GetSuccess() []*Employee {
  return p.Success
}
func (p *CompanyManagerGetEmployeeListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CompanyManagerGetEmployeeListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Employee, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &Employee{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Success = append(p.Success, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompanyManagerGetEmployeeListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEmployeeList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerGetEmployeeListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CompanyManagerGetEmployeeListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerGetEmployeeListResult(%+v)", *p)
}

// Attributes:
//  - ID
type CompanyManagerRemoveCompanyArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewCompanyManagerRemoveCompanyArgs() *CompanyManagerRemoveCompanyArgs {
  return &CompanyManagerRemoveCompanyArgs{}
}


func (p *CompanyManagerRemoveCompanyArgs) GetID() string {
  return p.ID
}
func (p *CompanyManagerRemoveCompanyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerRemoveCompanyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompanyManagerRemoveCompanyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCompany_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerRemoveCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompanyManagerRemoveCompanyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerRemoveCompanyArgs(%+v)", *p)
}

type CompanyManagerRemoveCompanyResult struct {
}

func NewCompanyManagerRemoveCompanyResult() *CompanyManagerRemoveCompanyResult {
  return &CompanyManagerRemoveCompanyResult{}
}

func (p *CompanyManagerRemoveCompanyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompanyManagerRemoveCompanyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCompany_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompanyManagerRemoveCompanyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompanyManagerRemoveCompanyResult(%+v)", *p)
}


